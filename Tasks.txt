
0) Project Setup & Safeguards

0.1 Clone & Backup

Clone repo, create a backup/ copy of current site.

Add a feature branch merge-upgrade.


0.2 Key Handling (client-only site)

Create a Settings modal that stores API keys in localStorage (geminiKey, openrouterKey, etc.).

Never hardcode keys in source; read at runtime from the modal.


0.3 File Layout (final)

/assets/ (icons, svgs, logos)
/css/    (existing styles + tiny fixes only)
/js/     (split by feature; workers go in /js/workers)
/tools/  (per-tool modules)
/seo/    (sitemap.xml, robots.txt)
/index.html   (merged final)
/update.html  (kept for reference; not shipped)
/final.html   (optional: single-build output if bundling)


---

1) Read & Merge HTML

1.1 Read index.html fully (base structure & UI rules).
1.2 Read update.html (all new features & IDs/classes).
1.3 Diff & Map

List all overlapping sections, IDs, event handlers.

Identify “Other Tools”, T2I, TTS, chatbot areas.


1.4 Merge (non-destructive)

Start from index.html as base.

Inject update.html features without altering existing classes/HTML structure.

Only add minimal wrappers if strictly needed to fix breakage.


1.5 Keep Style Stable

Do not change global CSS tokens, colors, spacing.

If UI “breaks”, fix with targeted CSS (max 10–20 lines) and min-height, flex wrap, or overflow rules.



---

2) Performance & Lag Reduction (before new features)

2.1 Script Loading

Convert blocking <script> to defer where safe.

Inline only tiny critical JS; move the rest to /js/.


2.2 Rendering

Avoid forced reflows in loops; batch DOM updates (document fragments).

Use requestAnimationFrame for visual updates.


2.3 Network

Add preconnect to frequent domains (pollinations, openrouter, etc.).

Cache static SVGs and icons.


2.4 Concurrency

Add /js/workers/queue.worker.js that manages parallel calls with a configurable pool size.



---

3) Text-to-Image (T2I) Upgrades

3.1 Default Provider

Set Pollinations as default.

Endpoint example: https://image.pollinations.ai/prompt/{ENCODED_PROMPT}?n={count}&...

Provide seed & aspect options as supported.



3.2 50 Images Limit

Update UI control: max=50.

Validate input and display remaining quota/warnings if needed.


3.3 Providers (selectable)

Add provider dropdown:

Pollinations (default)

Stable Horde (free community)

Lexica API (search+gen if available)

(Slot) Custom endpoint (user pastes base URL & key)



3.4 Parallel Fetch

Use queue.worker.js to fan-out requests in batches (e.g., pool=6–10).

Show per-image loading placeholders with progressive fill.


3.5 Random Shuffle

After fetch, if toggle is ON → images = shuffle(images) before render.


3.6 Non-Blocking UX

All T2I runs in a Web Worker; emit events to UI.

Ensure web scraper and other tools remain usable.



---

4) Text-to-Speech (TTS) Fixes

4.1 Engines

Engine A (live playback): Web Speech API (no key)

Populate voice list; filter by name/gender heuristics.


Engine B (MP3 download): Free TTS provider (e.g., VoiceRSS or any configured).

Add engine adapter: ttsEngine = 'webspeech' | 'api'.



4.2 Working MP3

For API engine: fetch binary audio, create Blob, enable Download .mp3 button.


4.3 Male/Female Selection

For Web Speech: filter voices list (fallback if exact gender missing).

For API: pass voiceId/gender param if provider supports.


4.4 Speed Control

Add slider: 0.5–1.5x (apply to Web Speech rate and API speed if supported).


4.5 Stability

Debounce play; cancel previous utterance on new play.

Catch and surface API errors with user-friendly toasts.



---

5) Chatbot Dock (Bottom-Right)

5.1 Launcher Button

Fixed bottom-right chat SVG button; floating, high z-index.


5.2 Chat UI Panel

Slide-in drawer with tabs: Providers, Chat, Settings.


5.3 Providers Supported

Gemini (use user key; model: free tier default from AI Studio).

DeepSeek R1 via OpenRouter (use user key).

text.pollinations.ai (add as free option).

(Optional) add any extra free provider toggles.


5.4 Runtime Config

In Settings tab, inputs for keys; save to localStorage.

Provider dropdown in Chat tab; messages stream with incremental updates.


5.5 Non-Blocking

Use fetch + ReadableStream if provider supports streaming.

Keep rest of page fully interactive.



---

6) “Other Tools” — Add 30+ Working Tools

6.1 Keep Same Card UI

Duplicate existing tool card component and grid style.


6.2 Implement the following tools (all lightweight): Text & Language

1. Grammar Checker — LanguageTool


2. Summarizer — SMMRY or HF Inference


3. Paraphraser — Paraphraser.io or local synonym flip fallback


4. Translator — LibreTranslate


5. Sentiment — HF sentiment model


6. Keyword Extractor — TextRazor


7. Text→Handwriting — text-to-handwriting.js



Image & Media 8) Background Remover — remove.bg (free tier) or local segmentation fallback
9) Image Compressor — Compressor.js
10) Color Picker — Canvas-based
11) PNG/JPG/WebP Converter — Canvas-based
12) QR Code Reader — html5-qrcode (upload + camera)
13) QR Code Generator — goQR
14) GIF Maker — gif.js
15) ASCII Art from Image — Canvas-based

File & Document 16) PDF→Text — PDF.js
17) Text→PDF — jsPDF
18) Merge PDFs — PDF-Lib
19) Excel→CSV — Sheet parser (SheetJS lite)
20) CSV→JSON — Local parser

Web Utilities 21) Website Screenshot — microlink.io
22) Webpage→PDF — pdfshift (free tier)
23) WHOIS Lookup — whoisapi (free plan)
24) IP Lookup — ip-api.com
25) URL Shortener — shrtco.de

Coding & Dev 26) JSON Formatter — Local
27) HTML/CSS/JS Minifier — Local
28) Regex Tester — Local
29) Markdown→HTML — Local
30) Syntax Highlighter — Prism.js

Fun & Creative 31) Meme Generator — Imgflip
32) Jokes — Official Joke API
33) Quotes — Quotable
34) ASCII Banner — FIGlet.js

6.3 Tool Loader

Lazy-load each tool’s JS on first open.

Provide uniform error toasts and spinners.


6.4 Permissions

For camera-based tools (QR), request permission on demand only.



---

7) SEO (Dense & Safe)

7.1 Head Tags

Add canonical, meta description (keyword-rich), OpenGraph & Twitter cards.

Add link rel="preconnect" to main APIs/CDNs.


7.2 Structured Data

Add JSON-LD WebSite + Organization.


7.3 Assets

Create /seo/robots.txt (allow all) and /seo/sitemap.xml with main routes.


7.4 Content Hooks

Ensure each tool has an <h2> with relevant keywords and an accessible description.



---

8) Concurrency & Parallelism

8.1 Queue Worker

General worker that accepts job arrays (e.g., 50 T2I URLs), pool size, retries, and progress callbacks.


8.2 Abort & Retry

Add AbortController support; UI “Cancel All” button.

Auto retry failed image fetches up to 2x.


8.3 Multitasking

T2I & Web Scraper run in separate workers to keep UI responsive.



---

9) Minimal UI Fixes (Only if Broken)

9.1 Grid Wrapping

Ensure cards wrap on small screens; fix with flex-wrap or grid-auto-rows.


9.2 Image Masonry Stability

Reserve height placeholders to prevent content jump.


9.3 Buttons

Ensure consistent hit-area and :active states; no color/theme changes.



---

10) Testing Checklist

10.1 Functional

T2I (Pollinations default), 1–50 images, random shuffle, parallel fetch.

TTS: live playback, gender selection, speed, MP3 download works.

Chatbot: switch providers, stream responses, no page freeze.

All 30+ tools open, operate, and return results.


10.2 Performance

Lighthouse ≥ 85 Performance; no blocking main-thread spikes > 200ms.

Images lazy-load; total JS < 300KB added (gz).


10.3 Accessibility

Buttons/inputs labelled; keyboard navigable; focus states visible.


10.4 SEO

Meta tags present; structured data valid (Rich Results test).



---

11) Delivery

11.1 Files

Ship index.html (merged final), /css/*, /js/*, /tools/*, /seo/*, assets.

Optional: final.html if you compile into a single file for portability.


11.2 Docs

README.md with:

How to paste keys in Settings

Provider notes & limits

How to change T2I concurrency

List of tools and APIs used



11.3 No Breaking Changes

Visual parity with original UI (only tiny stability fixes).



---

12) Post-Deploy

12.1 Monitor

Console errors, API failures, quota messages.
12.2 Fallbacks

If a free API fails, auto-switch to next available provider (notify user).



---

Implementation Hints (quick)

Create provider adapters: /js/providers/{t2i|tts|chat}/... with a shared interface.

Use event-driven UI (CustomEvent) from workers for progress.

Centralize toasts/loading UI to keep behavior consistent.

Keep all new CSS in one small file, e.g., /css/patch.css.

